.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WordNet::SenseRelate::AllWords 3"
.TH WordNet::SenseRelate::AllWords 3 "2009-05-27" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WordNet::SenseRelate::AllWords \- Disambiguate All Words in a Text based on semantic similarity and relatedness in WordNet
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&  use WordNet::SenseRelate::AllWords;
\&  use WordNet::QueryData;
\&  use WordNet::Tools;
\&  my $qd = WordNet::QueryData\->new;
\&  defined $qd or die "Construction of WordNet::QueryData failed";
\&  my $wntools = WordNet::Tools\->new($qd);
\&  defined $wntools or die "\enCouldn\*(Aqt construct WordNet::Tools object"; 
\&
\&  my $wsd = WordNet::SenseRelate::AllWords\->new (wordnet => $qd,
\&                                                 wntools => $wntools,
\&                                                 measure => \*(AqWordNet::Similarity::lesk\*(Aq);
\&
\&  my @context = qw/the bridge is held up by red tape/;
\&  my @results = $wsd\->disambiguate (window => 3,
\&                                    context => [@context]);
\&  print "@results\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
WordNet::SenseRelate::AllWords implements an algorithm for Word Sense
Disambiguation that uses measures of semantic relatedness.  The algorithm
is an extension of an algorithm described by Pedersen, Banerjee, and
Patwardhan[1].  This implementation is similar to the original SenseRelate
package but disambiguates every word in the given context rather than just
single word.
.SS "Methods"
.IX Subsection "Methods"
Note: the methods below will \fIdie()\fR on serious errors.  Wrap calls to the
methods in an eval \s-1BLOCK\s0 to catch the exceptions.  See
\&'perldoc \-f eval' for more information.
.PP
Example:
.PP
.Vb 2
\&  my @res;
\&  eval {@res = $wsd\->disambiguate (args...)}
\&
\&  if ($@){
\&      print STDERR "An exception occurred ($@)\en";
\&  }
.Ve
.IP "\fBnew\fR" 4
.IX Item "new"
The constructor for this class.  It will create a new instance and
return a reference to the constructed object.
.Sp
Parameters:
.Sp
.Vb 10
\&  wordnet      => REFERENCE : WordNet::QueryData object
\&  wntools          => REFERENCE : WordNet::Tools object
\&  measure      => STRING    : name of a WordNet::Similarity measure
\&  config       => FILENAME  : config file for above measure
\&  outfile      => FILENAME  : name of a file for output (optional)
\&  stoplist     => FILENAME  : file containing list of stop words
\&  pairScore    => INTEGER   : minimum pairwise score (default: 0)
\&  contextScore => INTEGER   : minimum overall score (default: 0)
\&  trace        => INTEGER   : generate traces (default: 0)
\&  forcepos     => INTEGER   : do part\-of\-speech coercion (default: 0)
\&  nocompoundify => INTEGER  : disable compoundify (default: 0)
\&  usemono => INTEGER  : enable assigning the available sense to usemono (default: 0)
\&  backoff => INTEGER  : enable assigning most frequent sense if the measure can\*(Aqt assign sense (default: 0)
.Ve
.Sp
Returns:
.Sp
.Vb 1
\&  A reference to the constructed object.
.Ve
.Sp
Example:
.Sp
.Vb 4
\&  WordNet::SenseRelate::AllWords\->new (wordnet => $query_data_obj,
\&                                       wntools => $wordnet_tools_obj,
\&                                       measure => \*(AqWordNet::Similarity::lesk\*(Aq,
\&                                       trace   => 1);
.Ve
.Sp
The trace levels are:
.Sp
.Vb 1
\&  1 Show the context window for each pass through the algorithm.
\&
\&  2 Display winning score for each pass (i.e., for each target word).
\&
\&  4 Display the non\-zero scores for each sense of each target
\&    word (overrides 2).
\&
\&  8 Display the non\-zero values from the semantic relatedness measures.
\&
\& 16 Show the zero values as well when combined with either 4 or 8.
\&    When not used with 4 or 8, this has no effect.
\&
\& 32 Display traces from the semantic relatedness module.
.Ve
.Sp
These trace levels can be added together.  For example, by specifying
a trace level of 3, the context window will be displayed along with
the winning score for each pass.
.IP "\fBdisambiguate\fR" 4
.IX Item "disambiguate"
Disambiguates all the words in the specified context and returns them
as a list.  If a word cannot be disambiguated, then it is returned \*(L"as is\*(R".
A word cannot be disambiguated if it is not in WordNet or if no value
exceeds the specified threshold.
.Sp
The context parameter specifies the
words to be disambiguated.  It treats the value as one sentence.  To
disambiguate a document with multiple sentences, make one call to
\&\fIdisambiguate()\fR for each sentence.
.Sp
Parameters:
.Sp
.Vb 8
\&  window => INTEGER    : the window size to use.  A window size of N means
\&                         that the window will include N words, including
\&                         the target word.  If N is an even number, there
\&                         will be one more word on the left side of the
\&                         target word than on the right.
\&  tagged => BOOLEAN    : true if the text is tagged, false otherwise
\&  scheme => normal|sense1|random|fixed : the disambiguation scheme to use
\&  context => ARRAY_REF : reference to an array of words to disambiguate
.Ve
.Sp
Returns:  An array of disambiguated words.
.Sp
Example:
.Sp
.Vb 2
\&  my @results =
\&    $wsd\->disambiguate (window => 3, tagged => 0, context => [@words]);
.Ve
.Sp
Rules for attaching suffixes:
.Sp
Suffixes are attached to the words in the context in order to ignore those while disambiguation. 
Note that after converting the tags to WordNet tags, tagged text is treated same as wntagged text.
.Sp
Below is the ordered enumeration of the words which are ignored for disambiguation and the suffixes attached to those words.
.Sp
Note that we check for such words in the order below:
.Sp
.Vb 1
\& 1 stopwords => #o 
\&
\& 2 Only for tagged text :
\&
\&    i)   Closed Class words => #CL
\&
\&    ii)  Invalid Tag => #IT
\&
\&    iii) Missing Word => #MW
\&
\& 3 For tagged and wntagged text:
\&
\&    i)   No Tag => #NT
\&
\&    ii)  Missing Word => #MW
\&
\&    iii) Invalid Tag => #IT
\&
\& 4 Not in WordNet => #ND
\&
\& 5 No Relatedness found with the surrounding words => #NR
.Ve
.IP "\fBgetTrace\fR" 4
.IX Item "getTrace"
Gets the current trace string and resets it to "".
.Sp
Parameters:
.Sp
.Vb 1
\&  None
.Ve
.Sp
Returns:
.Sp
.Vb 2
\&  The current trace string (before resetting it).  If the returned string
\&  is not empty, it will end with a newline.
.Ve
.Sp
Example:
.Sp
.Vb 2
\&  my $str = $wsd\->getTrace ();
\&  print $str;
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 1
\& L<WordNet::Similarity::AllWords>
.Ve
.PP
The main web page for SenseRelate is :
.PP
.Vb 1
\& L<http://senserelate.sourceforge.net/>
.Ve
.PP
There are several mailing lists for SenseRelate:
.PP
.Vb 1
\& L<http://lists.sourceforge.net/lists/listinfo/senserelate\-users/>
\&
\& L<http://lists.sourceforge.net/lists/listinfo/senserelate\-news/>
\&
\& L<http://lists.sourceforge.net/lists/listinfo/senserelate\-developers/>
.Ve
.SH "REFERENCES"
.IX Header "REFERENCES"
.IP "[1] Ted Pedersen, Satanjeev Banerjee, and Siddharth Patwardhan (2005) Maximizing Semantic Relatedness to Perform Word Sense Disambiguation, University of Minnesota Supercomputing Institute Research Report \s-1UMSI\s0 2005/25, March. http://www.msi.umn.edu/general/Reports/rptfiles/2005\-25.pdf <http://www.msi.umn.edu/general/Reports/rptfiles/2005-25.pdf>" 4
.IX Item "[1] Ted Pedersen, Satanjeev Banerjee, and Siddharth Patwardhan (2005) Maximizing Semantic Relatedness to Perform Word Sense Disambiguation, University of Minnesota Supercomputing Institute Research Report UMSI 2005/25, March. http://www.msi.umn.edu/general/Reports/rptfiles/2005-25.pdf <http://www.msi.umn.edu/general/Reports/rptfiles/2005-25.pdf>"
.SH "AUTHORS"
.IX Header "AUTHORS"
Jason Michelizzi, <jmichelizzi at users.sourceforge.net>
.PP
Varada Kolhatkar, <kolha002 at d.umn.edu>
.PP
Ted Pedersen, <tpederse at d.umn.edu>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2004\-2008 by Jason Michelizzi and Ted Pedersen
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the
\&\s-1GNU\s0 General Public License for more details.
